var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AbstractPermutations","category":"page"},{"location":"#AbstractPermutations","page":"Home","title":"AbstractPermutations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AbstractPermutations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [AbstractPermutations]","category":"page"},{"location":"#AbstractPermutations.AbstractPermutation","page":"Home","title":"AbstractPermutations.AbstractPermutation","text":"AbstractPermutation\n\nAbstract type representing bijections of positive integers ℕ = {1,2,…} finitely supported. That is, we treat permutations as functions ℕ → ℕ such that for every permutation σ there are only finitely many k different from their image under σ.\n\nMandatory interface\n\nSubtypes APerm <: AbstractPermutation must implement the following functions:\n\nAPerm(images::AbstractVector{<:Integer}[, check::Bool=true]) - a constructor of a APerm from a vector of images. Optionally the second argument check may be set to false when the caller knows that images constitute a honest permutation.\nBase.:^(i::Integer, σ::APerm) the customary notation for the image of i under σ.\ndegree(σ::APerm) the minimal d ≥ 1 such that σ fixes all k ≥ d.\n\nnote: Note\nThere is no formal requirement that the APerm(images) constructor actually returns a APerm. Any AbstractPermutation object would do. This may be useful if constructing permutation from images is not technically feasible.\n\nnote: Note\nIf APerm is not constructable from type one needs to implement one(::APerm).\n\nwarn: Warn\nEven though AbstractPermutation <: GroupsCore.GroupElement they don't necessarily implement the whole of GroupElement interface, e.g. it is possible to implement parent-less permutations.\n\nOptional interface\n\nperm(σ::APerm) by default returns σ - the \"simplest\" (implementation-wise) permutation underlying σ.\ninttype(::Type{<:APerm}) by default returns UInt32.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractPermutations.cycles-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"AbstractPermutations.cycles","text":"cycles(g::AbstractPermutation)\n\nReturn an iterator over cycles in the disjoint cycle decomposition of g.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractPermutations.degree-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"AbstractPermutations.degree","text":"degree(σ::AbstractPermutation)\n\nReturn a minimal number n ≥ 1 such that σ(k) == k for all k > n,\n\nSuch number n can be understood as a degree of a permutation, since we can regard σ as an element of Sym(1:n) (and not of Sym(1:n-1)).\n\nnote: Note\nBy this convention degree of the trivial permutation is equal to 1 and it is the only permutation with this property.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractPermutations.firstmoved","page":"Home","title":"AbstractPermutations.firstmoved","text":"firstmoved(g::AbstractPermutation[, range = 1:degree(g)])\n\nReturn the first point from range that is moved by g, or nothing if g fixes range point-wise.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractPermutations.fixedpoints","page":"Home","title":"AbstractPermutations.fixedpoints","text":"fixedpoints(g::AbstractPermutation[, range = 1:degree(g)])\n\nReturn the vector of points in range fixed by g.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractPermutations.inttype-Union{Tuple{Type{P}}, Tuple{P}} where P<:AbstractPermutations.AbstractPermutation","page":"Home","title":"AbstractPermutations.inttype","text":"inttype(σ::Type{<:AbstractPermutation})\n\nReturn the underlying \"storage\" integer.\n\nwarn: Warn\nFor internal use only.\n\nThe intension is to provide optimal storage type when the images vector constructor is used (to save allocations and memory copy). For example a hypothetic permutation Perm8 of elements up to length 255 may alter the default to UInt8.\n\nThe default is UInt32.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractPermutations.nfixedpoints","page":"Home","title":"AbstractPermutations.nfixedpoints","text":"nfixedpoints(g::AbstractPermutation[, range = 1:degree(g)])\n\nReturn the number of points in range fixed by g.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractPermutations.parity-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"AbstractPermutations.parity","text":"parity(g::AbstractPermutation)\n\nReturn the parity of number of factors in factorization of g into transpositions.\n\nReturn 1 if the number is odd and 0 otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractPermutations.perm-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"AbstractPermutations.perm","text":"perm(p::AbstractPermutation)\n\nReturn the \"bare-metal\" permutation (unwrap).\n\nwarn: Warn\nFor internal use only.\n\nAccess to wrapped permutation object. For \"bare-metal\" permutations this needs to return the identical (i.e. `===) object. The intention of ths functions is to provide un-wrapped permutations to computationally intensive algorithms, so that the external wrappers (if exist) do not hinder the performance.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractPermutations.permtype-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"AbstractPermutations.permtype","text":"permtype(g::AbstractPermutation)\n\nReturn the group-theoretic type of permutation g, i.e. the vector of lengths of cycles in the (disjoint) cycle decomposition of g.\n\nThe lengths are sorted in decreasing order and cycles of length 1 are omitted. permtype(g) fully determines the conjugacy class of g in the full symmetric group.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:^-Tuple{Integer, AbstractPermutations.AbstractPermutation}","page":"Home","title":"Base.:^","text":"^(i::Integer, σ::AbstractPermutation)\n\nReturn the image of i under σ.\n\nWe consider σ as a permutation of ℕ (the positive integers), with finite support, so by convention k^σ = k for all k > degree(σ).\n\nwarn: Warn\nThe behaviour of i^σ for i ≤ 0 is undefined and can not be relied upon.\n\n\n\n\n\n","category":"method"},{"location":"#Base.sign-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"Base.sign","text":"sign(g::AbstractPermutation)\n\nReturn the sign of a permutation.\n\nsign represents the homomorphism from the permutation group to the unit group of ℤ whose kernel is the alternating group.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractPermutations.@perm-Tuple{Any, Any}","page":"Home","title":"AbstractPermutations.@perm","text":"@perm P cycles_string\n\nMacro to parse cycles decomposition as a string into a permutation of type P.\n\nStrings for the output of e.g. GAP could be copied directly into @perm, as long as they are not elided. Cycles of length 1 are not necessary, but can be included.\n\nExamples:\n\njulia> p = @perm Perm{UInt16} \"(1,3)(2,4)\"\n(1,3)(2,4)\n\njulia> typeof(p)\nPerm{UInt16}\n\njulia> q = @perm Perm \"(1,3)(2,4)(3,5)(8)\"\n(1,5,3)(2,4)\n\n\n\n\n\n\n","category":"macro"}]
}
