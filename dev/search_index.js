var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AbstractPermutations","category":"page"},{"location":"#AbstractPermutations","page":"Home","title":"AbstractPermutations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AbstractPermutations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [AbstractPermutations]","category":"page"},{"location":"#AbstractPermutations.AbstractPermutation","page":"Home","title":"AbstractPermutations.AbstractPermutation","text":"AbstractPermutation\n\nAbstract type representing permutations of set 1:n.\n\nThey all embed canonically into InfinitePermGroup()\n\nMandatory interface\n\nSubtypes APerm <: AbstractPermutation must implement the following functions:\n\nBase.:^(i::Integer, σ::APerm) - the image of i under σ,\ndegree(σ::APerm) - the minimal n such that k^σ == k for all k > n,\n\nFor primitive (\"bare-metal\"/\"parent-less\") permutations one needs to implement\n\nAPerm(images::AbstractVector{<:Integer}[, check::Bool=true]) - construct a APerm from a vector of images. Optionally the second argument check may be  set to false when the caller knows that images constitute a honest  permutation.\n\nnote: Note\nThere is no formal requirement that the APerm(images) constructor actually returns a APerm. Any AbstractPermutation object would do. This may be useful if constructing permutation from images is not technically feasible.\n\nnote: Note\nIf APerm is not constructable from type one needs to implement one(::APerm).\n\nwarn: Warn\nEven though AbstractPermutation <: GroupsCore.GroupElement they don't necessarily implement the whole of GroupElement interface, e.g. it is possible to implement parent-less permutations.\n\nOptional interface\n\ninttype(::Type{<:APerm}) = UInt32 - return the underlying \"storage\" integer,\n\nif that makes any sense for APerm.\n\nperm(σ::APerm) = σ - return the \"bare-metal\" permutation (unwrap).\n\n\n\n\n\n","category":"type"},{"location":"#AbstractPermutations.cycles-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"AbstractPermutations.cycles","text":"cycles(g::AbstractPermutation)\n\nReturn an iterator over cycles in the disjoint cycle decomposition of g.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractPermutations.degree-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"AbstractPermutations.degree","text":"degree(σ::AbstractPermutation)\n\nReturn a minimal number n such that σ(k) == k for all k > n.\n\nSuch number n can be understood as a degree of a permutation, since we can regard σ as an element of Sym(n) (and not of Sym(n-1)).\n\nBy convention degree of the trivial permutation must return 1.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractPermutations.firstmoved","page":"Home","title":"AbstractPermutations.firstmoved","text":"firstmoved(g::AbstractPermutation[, range = 1:degree(g)])\n\nReturn the first point from range that is moved by g, or nothing if g fixes range point-wise.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractPermutations.fixedpoints","page":"Home","title":"AbstractPermutations.fixedpoints","text":"fixedpoints(g::AbstractPermutation[, range = 1:degree(g)])\n\nReturn the vector of points in range fixed by g.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractPermutations.inttype-Union{Tuple{Type{P}}, Tuple{P}} where P<:AbstractPermutations.AbstractPermutation","page":"Home","title":"AbstractPermutations.inttype","text":"inttype(σ::Type{<:AbstractPermutation})\n\nReturn the underlying \"storage\" integer. For internal use only.\n\nThe default is UInt32.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractPermutations.nfixedpoints","page":"Home","title":"AbstractPermutations.nfixedpoints","text":"nfixedpoints(g::AbstractPermutation[, range = 1:degree(g)])\n\nReturn the number of points in range fixed by g.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractPermutations.parity-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"AbstractPermutations.parity","text":"parity(g::AbstractPermutation)\n\nReturn the parity of number of factors in factorization of g into transpositions.\n\nReturn 1 if the number is odd and 0 otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractPermutations.perm-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"AbstractPermutations.perm","text":"perm(p::AbstractPermutation)\n\nReturn the \"bare-metal\" permutation (unwrap). For internal use only.\n\nAccess to wrapped permutation object. For \"bare-metal\" permutations this needs to return the identical (i.e. ===) object.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractPermutations.permtype-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"AbstractPermutations.permtype","text":"permtype(g::AbstractPermutation)\n\nReturn the group-theoretic type of permutation g, i.e. the vector of lengths of cycles in the (disjoint) cycle decomposition of g.\n\nThe lengths are sorted in decreasing order and cycles of length 1 are omitted. permtype(g) fully determines the conjugacy class of g in the full symmetric group.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:^-Tuple{Integer, AbstractPermutations.AbstractPermutation}","page":"Home","title":"Base.:^","text":"^(i::Integer, σ::AbstractPermutation)\n\nReturn the image of i under the (permutation) action of σ.\n\nWe consider σ as a finite support permutation of ℕ, so by convention k^σ = k for all k > degree(σ).\n\n\n\n\n\n","category":"method"},{"location":"#Base.sign-Tuple{AbstractPermutations.AbstractPermutation}","page":"Home","title":"Base.sign","text":"sign(g::AbstractPermutation)\n\nReturn the sign of a permutation.\n\nsign represents the homomorphism from the permutation group to the unit group of ℤ whose kernel is the alternating group.\n\n\n\n\n\n","category":"method"}]
}
